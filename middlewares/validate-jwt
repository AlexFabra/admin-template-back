const jwt = require('jsonwebtoken')
const user = require('../models/user')


const validateJWT = (req, res, next) => {

    //read token:
    const token = req.header('x-token');

    if (!token) {
        return res.status(401).json({
            ok: false,
            msg: 'the token is missing'
        })
    }

    try {
        //get decoded uid from token:
        const { uid } = jwt.verify(token, process.env.JWT_SECRET);
        req.uid = uid;
        next();

    } catch (error) {
        return res.status(401).json({
            ok: false,
            msg: 'the token is not valid'
        })
    }

}

const validateAdminRole = async (req, res, next) => {
    const uid = req.uid;
    try {
        const userDB = await user.findById(uid);
        if (!userDB) {
            return res.status(404).json({
                ok: false,
                msg: 'non-existent user'
            })
        }
        if (userDB.role !== 'ADMIN_ROLE') {
            return res.status(404).json({
                ok: false,
                msg: 'you need admin privileges'
            })
        }
        next();
    } catch (error) {
        res.status(500).json({
            ok: false,
            msg: 'error validating admin role'
        })
    }
}

const validateAdminRoleOrOwner = async (req, res, next) => {
    const uid = req.uid;
    const id = req.params.id;

    try {
        const userDB = await user.findById(uid);
        if (!userDB) {
            return res.status(404).json({
                ok: false,
                msg: 'non-existent user'
            })
        }
        if (userDB.role === 'ADMIN_ROLE' && uid === id) {
            next();
        } else {
            return res.status(404).json({
                ok: false,
                msg: 'you need admin privileges'
            })
        }
        next();
    } catch (error) {
        res.status(500).json({
            ok: false,
            msg: 'error validating admin role'
        })
    }
}

module.exports = {
    validateJWT,
    validateAdminRole,
    validateAdminRoleOrOwner
}